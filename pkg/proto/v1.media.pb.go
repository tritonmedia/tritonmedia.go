// Code generated by protoc-gen-go. DO NOT EDIT.
// source: v1.media.proto

package api

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// CreatorType is where this media came from (where it was requested)
type Media_CreatorType int32

const (
	// 0 isn't sent over the write in a lot of proto implementations, but is required to be
	// set in an enum, so we just throw this away here
	Media_EMPTY_1 Media_CreatorType = 0
	Media_TRELLO  Media_CreatorType = 1
	Media_TWILIO  Media_CreatorType = 2
	Media_DISCORD Media_CreatorType = 3
	Media_API     Media_CreatorType = 4
)

var Media_CreatorType_name = map[int32]string{
	0: "EMPTY_1",
	1: "TRELLO",
	2: "TWILIO",
	3: "DISCORD",
	4: "API",
}

var Media_CreatorType_value = map[string]int32{
	"EMPTY_1": 0,
	"TRELLO":  1,
	"TWILIO":  2,
	"DISCORD": 3,
	"API":     4,
}

func (x Media_CreatorType) String() string {
	return proto.EnumName(Media_CreatorType_name, int32(x))
}

func (Media_CreatorType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5e8049ce9a121c07, []int{0, 0}
}

// type of the media
type Media_MediaType int32

const (
	// 0 isn't sent over the write in a lot of proto implementations, but is required to be
	// set in an enum, so we just throw this away here
	Media_EMPTY_2 Media_MediaType = 0
	Media_MOVIE   Media_MediaType = 1
	Media_TV      Media_MediaType = 2
	Media_MUSIC   Media_MediaType = 3
)

var Media_MediaType_name = map[int32]string{
	0: "EMPTY_2",
	1: "MOVIE",
	2: "TV",
	3: "MUSIC",
}

var Media_MediaType_value = map[string]int32{
	"EMPTY_2": 0,
	"MOVIE":   1,
	"TV":      2,
	"MUSIC":   3,
}

func (x Media_MediaType) String() string {
	return proto.EnumName(Media_MediaType_name, int32(x))
}

func (Media_MediaType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5e8049ce9a121c07, []int{0, 1}
}

// SourceType is where this media came from
type Media_SourceType int32

const (
	// 0 isn't sent over the write in a lot of proto implementations, but is required to be
	// set in an enum, so we just throw this away here
	Media_EMPTY_3 Media_SourceType = 0
	Media_HTTP    Media_SourceType = 1
	Media_TORRENT Media_SourceType = 2
	Media_FILE    Media_SourceType = 3
	Media_BUCKET  Media_SourceType = 4
)

var Media_SourceType_name = map[int32]string{
	0: "EMPTY_3",
	1: "HTTP",
	2: "TORRENT",
	3: "FILE",
	4: "BUCKET",
}

var Media_SourceType_value = map[string]int32{
	"EMPTY_3": 0,
	"HTTP":    1,
	"TORRENT": 2,
	"FILE":    3,
	"BUCKET":  4,
}

func (x Media_SourceType) String() string {
	return proto.EnumName(Media_SourceType_name, int32(x))
}

func (Media_SourceType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5e8049ce9a121c07, []int{0, 2}
}

// MetadataType is the metadata provider used for deduplication and
// identification
type Media_MetadataType int32

const (
	// 0 isn't sent over the write in a lot of proto implementations, but is required to be
	// set in an enum, so we just throw this away here
	Media_EMPTY_4 Media_MetadataType = 0
	Media_MAL     Media_MetadataType = 1
	Media_IMDB    Media_MetadataType = 2
	Media_ANILIST Media_MetadataType = 3
	Media_KITSU   Media_MetadataType = 4
	Media_ANIDB   Media_MetadataType = 5
	Media_TVDB    Media_MetadataType = 6
	Media_TMDB    Media_MetadataType = 7
)

var Media_MetadataType_name = map[int32]string{
	0: "EMPTY_4",
	1: "MAL",
	2: "IMDB",
	3: "ANILIST",
	4: "KITSU",
	5: "ANIDB",
	6: "TVDB",
	7: "TMDB",
}

var Media_MetadataType_value = map[string]int32{
	"EMPTY_4": 0,
	"MAL":     1,
	"IMDB":    2,
	"ANILIST": 3,
	"KITSU":   4,
	"ANIDB":   5,
	"TVDB":    6,
	"TMDB":    7,
}

func (x Media_MetadataType) String() string {
	return proto.EnumName(Media_MetadataType_name, int32(x))
}

func (Media_MetadataType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5e8049ce9a121c07, []int{0, 3}
}

// v1.media represents v1 of the media card
type Media struct {
	// id of this media
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// name of the media
	Name    string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Creator Media_CreatorType `protobuf:"varint,3,opt,name=creator,proto3,enum=api.Media_CreatorType" json:"creator,omitempty"`
	// ID that correlates to creator, if needed
	CreatorId string             `protobuf:"bytes,4,opt,name=creatorId,proto3" json:"creatorId,omitempty"`
	Type      Media_MediaType    `protobuf:"varint,5,opt,name=type,proto3,enum=api.Media_MediaType" json:"type,omitempty"`
	Source    Media_SourceType   `protobuf:"varint,6,opt,name=source,proto3,enum=api.Media_SourceType" json:"source,omitempty"`
	SourceURI string             `protobuf:"bytes,7,opt,name=sourceURI,proto3" json:"sourceURI,omitempty"`
	Metadata  Media_MetadataType `protobuf:"varint,8,opt,name=metadata,proto3,enum=api.Media_MetadataType" json:"metadata,omitempty"`
	// metadataId is the id used to tie this to a metadata provider
	MetadataId string `protobuf:"bytes,9,opt,name=metadataId,proto3" json:"metadataId,omitempty"`
	// Status is the status of the media in the pipeline
	Status               TelemetryStatusEntry `protobuf:"varint,10,opt,name=status,proto3,enum=api.TelemetryStatusEntry" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Media) Reset()         { *m = Media{} }
func (m *Media) String() string { return proto.CompactTextString(m) }
func (*Media) ProtoMessage()    {}
func (*Media) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e8049ce9a121c07, []int{0}
}

func (m *Media) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Media.Unmarshal(m, b)
}
func (m *Media) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Media.Marshal(b, m, deterministic)
}
func (m *Media) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Media.Merge(m, src)
}
func (m *Media) XXX_Size() int {
	return xxx_messageInfo_Media.Size(m)
}
func (m *Media) XXX_DiscardUnknown() {
	xxx_messageInfo_Media.DiscardUnknown(m)
}

var xxx_messageInfo_Media proto.InternalMessageInfo

func (m *Media) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Media) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Media) GetCreator() Media_CreatorType {
	if m != nil {
		return m.Creator
	}
	return Media_EMPTY_1
}

func (m *Media) GetCreatorId() string {
	if m != nil {
		return m.CreatorId
	}
	return ""
}

func (m *Media) GetType() Media_MediaType {
	if m != nil {
		return m.Type
	}
	return Media_EMPTY_2
}

func (m *Media) GetSource() Media_SourceType {
	if m != nil {
		return m.Source
	}
	return Media_EMPTY_3
}

func (m *Media) GetSourceURI() string {
	if m != nil {
		return m.SourceURI
	}
	return ""
}

func (m *Media) GetMetadata() Media_MetadataType {
	if m != nil {
		return m.Metadata
	}
	return Media_EMPTY_4
}

func (m *Media) GetMetadataId() string {
	if m != nil {
		return m.MetadataId
	}
	return ""
}

func (m *Media) GetStatus() TelemetryStatusEntry {
	if m != nil {
		return m.Status
	}
	return TelemetryStatusEntry_EMPTY_4
}

func init() {
	proto.RegisterEnum("api.Media_CreatorType", Media_CreatorType_name, Media_CreatorType_value)
	proto.RegisterEnum("api.Media_MediaType", Media_MediaType_name, Media_MediaType_value)
	proto.RegisterEnum("api.Media_SourceType", Media_SourceType_name, Media_SourceType_value)
	proto.RegisterEnum("api.Media_MetadataType", Media_MetadataType_name, Media_MetadataType_value)
	proto.RegisterType((*Media)(nil), "api.Media")
}

func init() { proto.RegisterFile("v1.media.proto", fileDescriptor_5e8049ce9a121c07) }

var fileDescriptor_5e8049ce9a121c07 = []byte{
	// 450 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x92, 0x5f, 0x8b, 0xda, 0x4c,
	0x14, 0xc6, 0xcd, 0x1f, 0xa3, 0x9e, 0x7d, 0x91, 0xc3, 0xf0, 0xb6, 0x9d, 0x96, 0x52, 0x16, 0xaf,
	0xbc, 0x69, 0xa8, 0x6b, 0xe9, 0xbd, 0x9a, 0x2c, 0x3b, 0x6c, 0x62, 0x24, 0x19, 0x2d, 0xbd, 0x2a,
	0xe9, 0x66, 0x2e, 0x02, 0x75, 0x0d, 0x71, 0x76, 0xc1, 0xcf, 0xd4, 0x2f, 0x59, 0xe6, 0x44, 0x4d,
	0x7a, 0x13, 0x1e, 0x9e, 0xf3, 0x9c, 0xdf, 0x39, 0x39, 0x0c, 0x8c, 0x5f, 0x67, 0xfe, 0x5e, 0x15,
	0x65, 0xee, 0x57, 0xf5, 0x41, 0x1f, 0x98, 0x93, 0x57, 0xe5, 0x07, 0xf6, 0x3a, 0xf3, 0xb5, 0xfa,
	0xad, 0xf6, 0x4a, 0xd7, 0xa7, 0xa6, 0x30, 0xf9, 0xd3, 0x87, 0x7e, 0x6c, 0x82, 0x6c, 0x0c, 0x76,
	0x59, 0x70, 0xeb, 0xd6, 0x9a, 0x8e, 0x52, 0xbb, 0x2c, 0x18, 0x03, 0xf7, 0x39, 0xdf, 0x2b, 0x6e,
	0x93, 0x43, 0x9a, 0x7d, 0x81, 0xc1, 0x53, 0xad, 0x72, 0x7d, 0xa8, 0xb9, 0x73, 0x6b, 0x4d, 0xc7,
	0x77, 0x6f, 0xfd, 0xbc, 0x2a, 0x7d, 0x02, 0xf8, 0xab, 0xa6, 0x22, 0x4f, 0x95, 0x4a, 0x2f, 0x31,
	0xf6, 0x11, 0x46, 0x67, 0x29, 0x0a, 0xee, 0x12, 0xaa, 0x35, 0xd8, 0x14, 0x5c, 0x7d, 0xaa, 0x14,
	0xef, 0x13, 0xec, 0xff, 0x0e, 0x8c, 0xbe, 0x84, 0xa2, 0x04, 0xfb, 0x0c, 0xde, 0xf1, 0xf0, 0x52,
	0x3f, 0x29, 0xee, 0x51, 0xf6, 0x4d, 0x27, 0x9b, 0x51, 0x81, 0xc2, 0xe7, 0x90, 0x19, 0xdb, 0xa8,
	0x6d, 0x2a, 0xf8, 0xa0, 0x19, 0x7b, 0x35, 0xd8, 0x1c, 0x86, 0x7b, 0xa5, 0xf3, 0x22, 0xd7, 0x39,
	0x1f, 0x12, 0xee, 0xdd, 0x3f, 0xa3, 0x9b, 0x12, 0x01, 0xaf, 0x41, 0xf6, 0x09, 0xe0, 0xa2, 0x45,
	0xc1, 0x47, 0xc4, 0xec, 0x38, 0x6c, 0x06, 0xde, 0x51, 0xe7, 0xfa, 0xe5, 0xc8, 0x81, 0x90, 0xef,
	0x09, 0x29, 0x2f, 0xf7, 0xce, 0xa8, 0x16, 0x3e, 0xeb, 0xfa, 0x94, 0x9e, 0x83, 0x93, 0x07, 0xb8,
	0xe9, 0x1c, 0x8d, 0xdd, 0xc0, 0x20, 0x8c, 0x37, 0xf2, 0xc7, 0xcf, 0x19, 0xf6, 0x18, 0x80, 0x27,
	0xd3, 0x30, 0x8a, 0x12, 0xb4, 0x48, 0x7f, 0x17, 0x91, 0x48, 0xd0, 0x36, 0xa1, 0x40, 0x64, 0xab,
	0x24, 0x0d, 0xd0, 0x61, 0x03, 0x70, 0x16, 0x1b, 0x81, 0xee, 0xe4, 0x1b, 0x8c, 0xae, 0x17, 0x6b,
	0x39, 0x77, 0xd8, 0x63, 0x23, 0xe8, 0xc7, 0xc9, 0x4e, 0x84, 0x68, 0x31, 0x0f, 0x6c, 0xb9, 0x43,
	0x9b, 0xac, 0x6d, 0x26, 0x56, 0xe8, 0x4c, 0xee, 0x01, 0xda, 0xeb, 0xb5, 0x8d, 0x73, 0xec, 0xb1,
	0x21, 0xb8, 0x0f, 0x52, 0x6e, 0xd0, 0x32, 0xb6, 0x4c, 0xd2, 0x34, 0x5c, 0x4b, 0xb4, 0x8d, 0x7d,
	0x2f, 0xa2, 0x10, 0x1d, 0xb3, 0xd5, 0x72, 0xbb, 0x7a, 0x0c, 0x25, 0xba, 0x13, 0x05, 0xff, 0x75,
	0xcf, 0xd6, 0x92, 0xbe, 0x62, 0xcf, 0x6c, 0x19, 0x2f, 0x22, 0xb4, 0x4c, 0xaf, 0x88, 0x83, 0x65,
	0xf3, 0x17, 0x8b, 0xb5, 0x88, 0x44, 0x26, 0xd1, 0x31, 0xfb, 0x3c, 0x0a, 0x99, 0x6d, 0xd1, 0x35,
	0x72, 0xb1, 0x16, 0xc1, 0x12, 0xfb, 0x26, 0x2c, 0x77, 0xc1, 0x12, 0x3d, 0x52, 0xa6, 0x6d, 0xf0,
	0xcb, 0xa3, 0x47, 0x3b, 0xff, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x0a, 0xf2, 0x98, 0xd1, 0xdf, 0x02,
	0x00, 0x00,
}
